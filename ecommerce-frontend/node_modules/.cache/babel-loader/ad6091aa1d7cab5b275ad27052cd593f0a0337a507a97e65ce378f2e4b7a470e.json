{"ast":null,"code":"var _jsxFileName = \"/Users/manishdevkota/Documents/ecommerce/ecommerce-frontend/src/contexts/CartContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext(undefined);\nexport const useCart = () => {\n  _s();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n_s(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const CartProvider = ({\n  children\n}) => {\n  _s2();\n  const [cartItems, setCartItems] = useState([]);\n\n  // Load cart from localStorage on mount\n  useEffect(() => {\n    const savedCart = localStorage.getItem('cart');\n    if (savedCart) {\n      try {\n        setCartItems(JSON.parse(savedCart));\n      } catch (error) {\n        console.error('Failed to load cart from localStorage:', error);\n      }\n    }\n  }, []);\n\n  // Save cart to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('cart', JSON.stringify(cartItems));\n  }, [cartItems]);\n  const addToCart = (product, quantity = 1) => {\n    setCartItems(prevItems => {\n      const existingItem = prevItems.find(item => item.product.id === product.id);\n      if (existingItem) {\n        // Update quantity if item already exists\n        const newQuantity = existingItem.quantity + quantity;\n        if (newQuantity <= product.quantity) {\n          toast.success(`Updated ${product.name} quantity in cart`);\n          return prevItems.map(item => item.product.id === product.id ? {\n            ...item,\n            quantity: newQuantity\n          } : item);\n        } else {\n          toast.error(`Only ${product.quantity} items available in stock`);\n          return prevItems;\n        }\n      } else {\n        // Add new item\n        if (quantity <= product.quantity) {\n          toast.success(`Added ${product.name} to cart`);\n          return [...prevItems, {\n            product,\n            quantity\n          }];\n        } else {\n          toast.error(`Only ${product.quantity} items available in stock`);\n          return prevItems;\n        }\n      }\n    });\n  };\n  const removeFromCart = productId => {\n    setCartItems(prevItems => {\n      const item = prevItems.find(item => item.product.id === productId);\n      if (item) {\n        toast.success(`Removed ${item.product.name} from cart`);\n      }\n      return prevItems.filter(item => item.product.id !== productId);\n    });\n  };\n  const updateQuantity = (productId, quantity) => {\n    if (quantity <= 0) {\n      removeFromCart(productId);\n      return;\n    }\n    setCartItems(prevItems => prevItems.map(item => {\n      if (item.product.id === productId) {\n        if (quantity <= item.product.quantity) {\n          return {\n            ...item,\n            quantity\n          };\n        } else {\n          toast.error(`Only ${item.product.quantity} items available in stock`);\n          return item;\n        }\n      }\n      return item;\n    }));\n  };\n  const clearCart = () => {\n    setCartItems([]);\n    toast.success('Cart cleared');\n  };\n  const getCartTotal = () => {\n    return cartItems.reduce((total, item) => {\n      return total + parseFloat(item.product.price) * item.quantity;\n    }, 0);\n  };\n  const getCartCount = () => {\n    return cartItems.reduce((total, item) => total + item.quantity, 0);\n  };\n  const value = {\n    cartItems,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart,\n    getCartTotal,\n    getCartCount\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_s2(CartProvider, \"jdONvkEabzLc64SbXgqXBHRMg9M=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","toast","jsxDEV","_jsxDEV","CartContext","undefined","useCart","_s","context","Error","CartProvider","children","_s2","cartItems","setCartItems","savedCart","localStorage","getItem","JSON","parse","error","console","setItem","stringify","addToCart","product","quantity","prevItems","existingItem","find","item","id","newQuantity","success","name","map","removeFromCart","productId","filter","updateQuantity","clearCart","getCartTotal","reduce","total","parseFloat","price","getCartCount","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/manishdevkota/Documents/ecommerce/ecommerce-frontend/src/contexts/CartContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { CartItem, Product } from '../types';\nimport { toast } from 'react-toastify';\n\ninterface CartContextType {\n  cartItems: CartItem[];\n  addToCart: (product: Product, quantity?: number) => void;\n  removeFromCart: (productId: number) => void;\n  updateQuantity: (productId: number, quantity: number) => void;\n  clearCart: () => void;\n  getCartTotal: () => number;\n  getCartCount: () => number;\n}\n\nconst CartContext = createContext<CartContextType | undefined>(undefined);\n\nexport const useCart = () => {\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n\ninterface CartProviderProps {\n  children: React.ReactNode;\n}\n\nexport const CartProvider: React.FC<CartProviderProps> = ({ children }) => {\n  const [cartItems, setCartItems] = useState<CartItem[]>([]);\n\n  // Load cart from localStorage on mount\n  useEffect(() => {\n    const savedCart = localStorage.getItem('cart');\n    if (savedCart) {\n      try {\n        setCartItems(JSON.parse(savedCart));\n      } catch (error) {\n        console.error('Failed to load cart from localStorage:', error);\n      }\n    }\n  }, []);\n\n  // Save cart to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('cart', JSON.stringify(cartItems));\n  }, [cartItems]);\n\n  const addToCart = (product: Product, quantity: number = 1) => {\n    setCartItems(prevItems => {\n      const existingItem = prevItems.find(item => item.product.id === product.id);\n      \n      if (existingItem) {\n        // Update quantity if item already exists\n        const newQuantity = existingItem.quantity + quantity;\n        if (newQuantity <= product.quantity) {\n          toast.success(`Updated ${product.name} quantity in cart`);\n          return prevItems.map(item =>\n            item.product.id === product.id\n              ? { ...item, quantity: newQuantity }\n              : item\n          );\n        } else {\n          toast.error(`Only ${product.quantity} items available in stock`);\n          return prevItems;\n        }\n      } else {\n        // Add new item\n        if (quantity <= product.quantity) {\n          toast.success(`Added ${product.name} to cart`);\n          return [...prevItems, { product, quantity }];\n        } else {\n          toast.error(`Only ${product.quantity} items available in stock`);\n          return prevItems;\n        }\n      }\n    });\n  };\n\n  const removeFromCart = (productId: number) => {\n    setCartItems(prevItems => {\n      const item = prevItems.find(item => item.product.id === productId);\n      if (item) {\n        toast.success(`Removed ${item.product.name} from cart`);\n      }\n      return prevItems.filter(item => item.product.id !== productId);\n    });\n  };\n\n  const updateQuantity = (productId: number, quantity: number) => {\n    if (quantity <= 0) {\n      removeFromCart(productId);\n      return;\n    }\n\n    setCartItems(prevItems =>\n      prevItems.map(item => {\n        if (item.product.id === productId) {\n          if (quantity <= item.product.quantity) {\n            return { ...item, quantity };\n          } else {\n            toast.error(`Only ${item.product.quantity} items available in stock`);\n            return item;\n          }\n        }\n        return item;\n      })\n    );\n  };\n\n  const clearCart = () => {\n    setCartItems([]);\n    toast.success('Cart cleared');\n  };\n\n  const getCartTotal = () => {\n    return cartItems.reduce((total, item) => {\n      return total + (parseFloat(item.product.price) * item.quantity);\n    }, 0);\n  };\n\n  const getCartCount = () => {\n    return cartItems.reduce((total, item) => total + item.quantity, 0);\n  };\n\n  const value = {\n    cartItems,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart,\n    getCartTotal,\n    getCartCount,\n  };\n\n  return (\n    <CartContext.Provider value={value}>\n      {children}\n    </CartContext.Provider>\n  );\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE7E,SAASC,KAAK,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAYvC,MAAMC,WAAW,gBAAGP,aAAa,CAA8BQ,SAAS,CAAC;AAEzE,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGV,UAAU,CAACM,WAAW,CAAC;EACvC,IAAI,CAACI,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAYpB,OAAO,MAAMI,YAAyC,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACzE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAa,EAAE,CAAC;;EAE1D;EACAC,SAAS,CAAC,MAAM;IACd,MAAMe,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC9C,IAAIF,SAAS,EAAE;MACb,IAAI;QACFD,YAAY,CAACI,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC,CAAC;MACrC,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAChE;IACF;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACApB,SAAS,CAAC,MAAM;IACdgB,YAAY,CAACM,OAAO,CAAC,MAAM,EAAEJ,IAAI,CAACK,SAAS,CAACV,SAAS,CAAC,CAAC;EACzD,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAEf,MAAMW,SAAS,GAAGA,CAACC,OAAgB,EAAEC,QAAgB,GAAG,CAAC,KAAK;IAC5DZ,YAAY,CAACa,SAAS,IAAI;MACxB,MAAMC,YAAY,GAAGD,SAAS,CAACE,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACL,OAAO,CAACM,EAAE,KAAKN,OAAO,CAACM,EAAE,CAAC;MAE3E,IAAIH,YAAY,EAAE;QAChB;QACA,MAAMI,WAAW,GAAGJ,YAAY,CAACF,QAAQ,GAAGA,QAAQ;QACpD,IAAIM,WAAW,IAAIP,OAAO,CAACC,QAAQ,EAAE;UACnCzB,KAAK,CAACgC,OAAO,CAAC,WAAWR,OAAO,CAACS,IAAI,mBAAmB,CAAC;UACzD,OAAOP,SAAS,CAACQ,GAAG,CAACL,IAAI,IACvBA,IAAI,CAACL,OAAO,CAACM,EAAE,KAAKN,OAAO,CAACM,EAAE,GAC1B;YAAE,GAAGD,IAAI;YAAEJ,QAAQ,EAAEM;UAAY,CAAC,GAClCF,IACN,CAAC;QACH,CAAC,MAAM;UACL7B,KAAK,CAACmB,KAAK,CAAC,QAAQK,OAAO,CAACC,QAAQ,2BAA2B,CAAC;UAChE,OAAOC,SAAS;QAClB;MACF,CAAC,MAAM;QACL;QACA,IAAID,QAAQ,IAAID,OAAO,CAACC,QAAQ,EAAE;UAChCzB,KAAK,CAACgC,OAAO,CAAC,SAASR,OAAO,CAACS,IAAI,UAAU,CAAC;UAC9C,OAAO,CAAC,GAAGP,SAAS,EAAE;YAAEF,OAAO;YAAEC;UAAS,CAAC,CAAC;QAC9C,CAAC,MAAM;UACLzB,KAAK,CAACmB,KAAK,CAAC,QAAQK,OAAO,CAACC,QAAQ,2BAA2B,CAAC;UAChE,OAAOC,SAAS;QAClB;MACF;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMS,cAAc,GAAIC,SAAiB,IAAK;IAC5CvB,YAAY,CAACa,SAAS,IAAI;MACxB,MAAMG,IAAI,GAAGH,SAAS,CAACE,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACL,OAAO,CAACM,EAAE,KAAKM,SAAS,CAAC;MAClE,IAAIP,IAAI,EAAE;QACR7B,KAAK,CAACgC,OAAO,CAAC,WAAWH,IAAI,CAACL,OAAO,CAACS,IAAI,YAAY,CAAC;MACzD;MACA,OAAOP,SAAS,CAACW,MAAM,CAACR,IAAI,IAAIA,IAAI,CAACL,OAAO,CAACM,EAAE,KAAKM,SAAS,CAAC;IAChE,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,cAAc,GAAGA,CAACF,SAAiB,EAAEX,QAAgB,KAAK;IAC9D,IAAIA,QAAQ,IAAI,CAAC,EAAE;MACjBU,cAAc,CAACC,SAAS,CAAC;MACzB;IACF;IAEAvB,YAAY,CAACa,SAAS,IACpBA,SAAS,CAACQ,GAAG,CAACL,IAAI,IAAI;MACpB,IAAIA,IAAI,CAACL,OAAO,CAACM,EAAE,KAAKM,SAAS,EAAE;QACjC,IAAIX,QAAQ,IAAII,IAAI,CAACL,OAAO,CAACC,QAAQ,EAAE;UACrC,OAAO;YAAE,GAAGI,IAAI;YAAEJ;UAAS,CAAC;QAC9B,CAAC,MAAM;UACLzB,KAAK,CAACmB,KAAK,CAAC,QAAQU,IAAI,CAACL,OAAO,CAACC,QAAQ,2BAA2B,CAAC;UACrE,OAAOI,IAAI;QACb;MACF;MACA,OAAOA,IAAI;IACb,CAAC,CACH,CAAC;EACH,CAAC;EAED,MAAMU,SAAS,GAAGA,CAAA,KAAM;IACtB1B,YAAY,CAAC,EAAE,CAAC;IAChBb,KAAK,CAACgC,OAAO,CAAC,cAAc,CAAC;EAC/B,CAAC;EAED,MAAMQ,YAAY,GAAGA,CAAA,KAAM;IACzB,OAAO5B,SAAS,CAAC6B,MAAM,CAAC,CAACC,KAAK,EAAEb,IAAI,KAAK;MACvC,OAAOa,KAAK,GAAIC,UAAU,CAACd,IAAI,CAACL,OAAO,CAACoB,KAAK,CAAC,GAAGf,IAAI,CAACJ,QAAS;IACjE,CAAC,EAAE,CAAC,CAAC;EACP,CAAC;EAED,MAAMoB,YAAY,GAAGA,CAAA,KAAM;IACzB,OAAOjC,SAAS,CAAC6B,MAAM,CAAC,CAACC,KAAK,EAAEb,IAAI,KAAKa,KAAK,GAAGb,IAAI,CAACJ,QAAQ,EAAE,CAAC,CAAC;EACpE,CAAC;EAED,MAAMqB,KAAK,GAAG;IACZlC,SAAS;IACTW,SAAS;IACTY,cAAc;IACdG,cAAc;IACdC,SAAS;IACTC,YAAY;IACZK;EACF,CAAC;EAED,oBACE3C,OAAA,CAACC,WAAW,CAAC4C,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAApC,QAAA,EAChCA;EAAQ;IAAAsC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACxC,GAAA,CAhHWF,YAAyC;AAAA2C,EAAA,GAAzC3C,YAAyC;AAAA,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}